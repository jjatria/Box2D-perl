%{

#include <Box2D/Box2D.h>
#include <helper.h>

%}

%module{Box2D};

%name{Box2D::b2CircleShape} class b2CircleShape : public %name{Box2D::b2Shape} b2Shape
{

b2CircleShape();

int32 GetChildCount();

%{

bool
b2CircleShape::TestPoint( transform, p )
	b2Transform* transform
	b2Vec2* p
	CODE:
		RETVAL = THIS->TestPoint( *transform, *p );
	OUTPUT:
		RETVAL

bool
b2CircleShape::RayCast( output, input, transform, childIndex )
	b2RayCastOutput* output
	b2RayCastInput* input
	b2Transform* transform
	int32 childIndex
	CODE:
		RETVAL = THIS->RayCast( output, *input, *transform, childIndex );
	OUTPUT:
		RETVAL

void*
b2CircleShape::ComputeAABB( aabb, transform, childIndex )
	b2AABB* aabb
	b2Transform* transform
	int32 childIndex
	CODE:
		THIS->ComputeAABB( aabb, *transform, childIndex );

void*
b2CircleShape::ComputeMass( massData, density )
	b2MassData* massData
	float32 density
	CODE:
		THIS->ComputeMass( massData, density );

void*
b2CircleShape::m_p( ... )
	PREINIT:
		const char* CLASS = "Box2D::b2Vec2";
	CODE:
		if( items > 1 )
		{
			THIS->m_p = *(b2Vec2 *)stack_to_object(ST(1));
		}
		RETVAL = &(THIS->m_p);
	OUTPUT:
		RETVAL

%}

};
